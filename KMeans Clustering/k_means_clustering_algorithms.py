# -*- coding: utf-8 -*-
"""K Means Clustering Algorithms.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19TR4S20K8R-gPXGCkHkbGua5BUU8VGcZ
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
import pandas as pd
import numpy as np
# %matplotlib inline

X,y=make_blobs(n_samples=1000,centers=3,n_features=2)

X

y # we won't use this labels as it is unsupervised learning

plt.scatter(X[:,0],X[:,1],c=y)

# we will use kmeans to see how many clusters it gives us and verify with our result above

# standardisation -- feature scaling technique
from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(
    X,y,test_size=0.33,random_state=42)

X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled=scaler.transform(X_test) #We use transform and not fit_transform to prevent data leakage

from sklearn.cluster import KMeans

# we won't use ytrain and ytest as we are doing unsupervised learning

#Elbow method to select K value
wcss=[]
for k in range(1,11):
  kmeans=KMeans(n_clusters=k,init="k-means++")
  kmeans.fit(X_train_scaled)
  wcss.append(kmeans.inertia_)

wcss

# plot elbow curve
plt.plot(range(1,11),wcss)
plt.xticks(range(1,11))
plt.xlabel("Number of clusters")
plt.ylabel("WCSS")
plt.show()

# we observe that after point 3 the slope start stabilizing indicatinf that we need 3 centroid to initialize

kmeans=KMeans(n_clusters=3,init="k-means++")

kmeans.fit_predict(X_train_scaled)

y_pred=kmeans.predict(X_test_scaled)

y_pred

plt.scatter(X_test[:,0],X_test[:,1],c=y_pred)

#Validate K Values  -> as sometimes elbow mwthod may not be efficient eg when the values of graph are not stabilsing
# 1 Kneelocator
# 2 Silhoutee scoring

# Kneelocator
!pip install kneed

from kneed import KneeLocator

kl=KneeLocator(range(1,11),wcss,curve='convex',direction='decreasing')

kl.elbow

## silhoutte score
from sklearn.metrics import silhouette_score

silhouette_coefficients=[]
for k in range(2,11):
  kmeans=KMeans(n_clusters=k,init="k-means++")
  kmeans.fit(X_train_scaled)
  score=silhouette_score(X_train_scaled,kmeans.labels_)
  silhouette_coefficients.append(score)

silhouette_coefficients

## plotting silhouette score
plt.plot(range(2,11),silhouette_coefficients)
plt.xticks(range(2,11))
plt.xlabel("Number of clusters")
plt.ylabel("Silhouette Coefficient")
plt.show

# wherever the value is very high of score that has to be used